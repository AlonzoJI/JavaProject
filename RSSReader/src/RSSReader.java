import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Jared Alonzo
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String title = "No Title";
        String link = "#";
        String description = "No Description Available";

        for (int i = 0; i < channel.numberOfChildren(); i++) {
            XMLTree child = channel.child(i);
            if (child.isTag()) {
                if ("title".equals(child.label())
                        && child.numberOfChildren() > 0) {
                    title = child.child(0).label();
                } else if ("link".equals(child.label())
                        && child.numberOfChildren() > 0) {
                    link = child.child(0).label();
                } else if ("description".equals(child.label())
                        && child.numberOfChildren() > 0) {
                    description = child.child(0).label();
                }
            }
        }

        out.println("<html><head><title>" + title + "</title></head><body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println(
                "<table border=\"1\"><tr><th>Date</th><th>Source</th><th>News</th></tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table></body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        int index = -1;
        int i = 0;
        while (index == -1 && i < xml.numberOfChildren()) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String date = "No date available";
        int dateIndex = getChildElement(item, "pubDate");
        if (dateIndex != -1 && item.child(dateIndex).numberOfChildren() > 0) {
            date = item.child(dateIndex).child(0).label();
        }

        String source = "No source available";
        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex != -1
                && item.child(sourceIndex).numberOfChildren() > 0) {
            source = item.child(sourceIndex).child(0).label();
            if (item.child(sourceIndex).hasAttribute("url")) {
                source = "<a href=\""
                        + item.child(sourceIndex).attributeValue("url") + "\">"
                        + source + "</a>";
            }
        }

        String title = "No title available";
        int titleIndex = getChildElement(item, "title");
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            title = item.child(titleIndex).child(0).label();
        } else {
            int descriptionIndex = getChildElement(item, "description");
            if (descriptionIndex != -1
                    && item.child(descriptionIndex).numberOfChildren() > 0) {
                title = item.child(descriptionIndex).child(0).label();
            }
        }

        String link = "";
        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            link = item.child(linkIndex).child(0).label();
        }

        if (!link.isEmpty()) {
            title = "<a href=\"" + link + "\">" + title + "</a>";
        }

        out.println("<tr><td>" + date + "</td><td>" + source + "</td><td>"
                + title + "</td></tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.println("Please Enter RSS URL: ");
        String url = in.nextLine();
        out.println("Please Enter HTML Filename: ");
        String filename = in.nextLine();

        XMLTree xmlTree = new XMLTree1(url);

        if (xmlTree.label().equals("rss") && xmlTree.hasAttribute("version")
                && xmlTree.attributeValue("version").equals("2.0")) {
            SimpleWriter fileOut = new SimpleWriter1L(filename);
            XMLTree channel = xmlTree.child(0);

            outputHeader(channel, fileOut);
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                XMLTree child = channel.child(i);
                if (child.isTag() && child.label().equals("item")) {
                    processItem(child, fileOut);
                }
            }
            outputFooter(fileOut);
            fileOut.close();
        } else {
            out.println("Invalid RSS feed URL.");
        }

        in.close();
        out.close();
    }

}